[
    {
        "id": "5ec824872cd94a31",
        "type": "subflow",
        "name": "AC",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 80,
                "y": 140,
                "wires": [
                    {
                        "id": "d4d4d85cfa3381e0"
                    },
                    {
                        "id": "aeebdc64229a5257"
                    },
                    {
                        "id": "4262a377b349288b"
                    },
                    {
                        "id": "7bfc45a210da7543"
                    },
                    {
                        "id": "94a125713cf50d2b"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 420,
                "y": 80,
                "wires": [
                    {
                        "id": "d4d4d85cfa3381e0",
                        "port": 0
                    }
                ]
            },
            {
                "x": 420,
                "y": 120,
                "wires": [
                    {
                        "id": "94a125713cf50d2b",
                        "port": 0
                    }
                ]
            },
            {
                "x": 420,
                "y": 160,
                "wires": [
                    {
                        "id": "aeebdc64229a5257",
                        "port": 0
                    }
                ]
            },
            {
                "x": 420,
                "y": 200,
                "wires": [
                    {
                        "id": "4262a377b349288b",
                        "port": 0
                    }
                ]
            },
            {
                "x": 420,
                "y": 240,
                "wires": [
                    {
                        "id": "7bfc45a210da7543",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "d4d4d85cfa3381e0",
        "type": "function",
        "z": "5ec824872cd94a31",
        "name": "开关",
        "func": "// Pass only messages coming from homekit node\nif (msg.hap.context !== undefined) {\n    if (msg.payload.Active !== undefined) {\n        flow.set(\"state\", msg.payload.Active);\n        node.log('发送空调开关：' + msg.payload.Active);\n        if (Boolean(msg.payload.Active) === true) {\n            return { payload: true };\n        }\n        else if (Boolean(msg.payload.Active) === false) {\n            return { payload: false };\n        }\n    }\n}",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 210,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "aeebdc64229a5257",
        "type": "function",
        "z": "5ec824872cd94a31",
        "name": "设置制热温度",
        "func": "// Pass only messages coming from homekit node\nif (msg.hap.context !== undefined) {\n    if (msg.payload.HeatingThresholdTemperature !== undefined) {\n        node.log('发送空调制热温度：' + msg.payload.HeatingThresholdTemperature);\n        return { payload: msg.payload.HeatingThresholdTemperature };\n    }\n}",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 240,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "4262a377b349288b",
        "type": "function",
        "z": "5ec824872cd94a31",
        "name": "设置制冷温度",
        "func": "// Pass only messages coming from homekit node\nif (msg.hap.context !== undefined) {\n    if (msg.payload.CoolingThresholdTemperature !== undefined) {\n        node.log('发送空调制冷温度：' + msg.payload.CoolingThresholdTemperature);\n        return { payload: msg.payload.CoolingThresholdTemperature };\n    }\n}",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 240,
        "y": 200,
        "wires": [
            []
        ]
    },
    {
        "id": "7bfc45a210da7543",
        "type": "function",
        "z": "5ec824872cd94a31",
        "name": "风速",
        "func": "// Pass only messages coming from homekit node\nif (msg.hap.context !== undefined) {\n    var value = 0;\n    if (msg.payload.RotationSpeed !== undefined) {\n        if (msg.payload.RotationSpeed > 0 && msg.payload.RotationSpeed <= 34)\n        {\n            value = 1;\n        }\n        else if (msg.payload.RotationSpeed > 34 && msg.payload.RotationSpeed <= 67)\n        {\n            value = 3;\n        }\n        else if (msg.payload.RotationSpeed > 67 && msg.payload.RotationSpeed <= 101)\n        {\n            value = 5;\n        }\n    }\n    // reset rotationspeed when shutdown.\n    if (msg.payload.Active !== undefined) {\n        if (Boolean(msg.payload.Active) === false) {\n            value = 0;\n        }\n    }\n    node.log('发送空调风速：' + value);\n    return { payload: value };\n}",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 210,
        "y": 240,
        "wires": [
            []
        ]
    },
    {
        "id": "94a125713cf50d2b",
        "type": "function",
        "z": "5ec824872cd94a31",
        "name": "模式",
        "func": "// Pass only messages coming from homekit node\nif (msg.hap.context !== undefined) {\n    if (msg.payload.TargetHeaterCoolerState !== undefined) {\n        if (msg.payload.TargetHeaterCoolerState === 1) {\n            node.log('发送空调模式：制热');\n            return { payload: 1 };\n        }\n        else if (msg.payload.TargetHeaterCoolerState === 2) {\n            node.log('发送空调模式：制冷');\n            return { payload: 3 };\n        }\n    }\n}",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 210,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "dfd031a2a96aba1c",
        "type": "tab",
        "label": "主卧",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "cba5a84305cee286",
        "type": "homekit-service",
        "z": "dfd031a2a96aba1c",
        "isParent": true,
        "hostType": "0",
        "bridge": "2f761eeaa39069eb",
        "accessoryId": "",
        "parentService": "",
        "name": "主灯",
        "serviceName": "Lightbulb",
        "topic": "",
        "filter": false,
        "manufacturer": "NRCHKB",
        "model": "1.4.3",
        "serialNo": "Default Serial Number",
        "firmwareRev": "1.4.3",
        "hardwareRev": "1.4.3",
        "softwareRev": "1.4.3",
        "cameraConfigVideoProcessor": "ffmpeg",
        "cameraConfigSource": "",
        "cameraConfigStillImageSource": "",
        "cameraConfigMaxStreams": 2,
        "cameraConfigMaxWidth": 1280,
        "cameraConfigMaxHeight": 720,
        "cameraConfigMaxFPS": 10,
        "cameraConfigMaxBitrate": 300,
        "cameraConfigVideoCodec": "libx264",
        "cameraConfigAudioCodec": "libfdk_aac",
        "cameraConfigAudio": false,
        "cameraConfigPacketSize": 1316,
        "cameraConfigVerticalFlip": false,
        "cameraConfigHorizontalFlip": false,
        "cameraConfigMapVideo": "0:0",
        "cameraConfigMapAudio": "0:1",
        "cameraConfigVideoFilter": "scale=1280:720",
        "cameraConfigAdditionalCommandLine": "-tune zerolatency",
        "cameraConfigDebug": false,
        "cameraConfigSnapshotOutput": "disabled",
        "cameraConfigInterfaceName": "",
        "characteristicProperties": "{}",
        "waitForSetupMsg": false,
        "outputs": 2,
        "x": 850,
        "y": 120,
        "wires": [
            [
                "851c5d49eb4fe33c"
            ],
            []
        ]
    },
    {
        "id": "b7f05e7fba3f6e1b",
        "type": "homekit-service",
        "z": "dfd031a2a96aba1c",
        "isParent": true,
        "hostType": "0",
        "bridge": "2f761eeaa39069eb",
        "accessoryId": "",
        "parentService": "",
        "name": "灯带",
        "serviceName": "Lightbulb",
        "topic": "",
        "filter": false,
        "manufacturer": "NRCHKB",
        "model": "1.4.3",
        "serialNo": "Default Serial Number",
        "firmwareRev": "1.4.3",
        "hardwareRev": "1.4.3",
        "softwareRev": "1.4.3",
        "cameraConfigVideoProcessor": "ffmpeg",
        "cameraConfigSource": "",
        "cameraConfigStillImageSource": "",
        "cameraConfigMaxStreams": 2,
        "cameraConfigMaxWidth": 1280,
        "cameraConfigMaxHeight": 720,
        "cameraConfigMaxFPS": 10,
        "cameraConfigMaxBitrate": 300,
        "cameraConfigVideoCodec": "libx264",
        "cameraConfigAudioCodec": "libfdk_aac",
        "cameraConfigAudio": false,
        "cameraConfigPacketSize": 1316,
        "cameraConfigVerticalFlip": false,
        "cameraConfigHorizontalFlip": false,
        "cameraConfigMapVideo": "0:0",
        "cameraConfigMapAudio": "0:1",
        "cameraConfigVideoFilter": "scale=1280:720",
        "cameraConfigAdditionalCommandLine": "-tune zerolatency",
        "cameraConfigDebug": false,
        "cameraConfigSnapshotOutput": "disabled",
        "cameraConfigInterfaceName": "",
        "characteristicProperties": "{}",
        "waitForSetupMsg": false,
        "outputs": 2,
        "x": 850,
        "y": 240,
        "wires": [
            [
                "1d2ab9999ab0e7a7"
            ],
            []
        ]
    },
    {
        "id": "0843122ffa53f6ab",
        "type": "homekit-service",
        "z": "dfd031a2a96aba1c",
        "isParent": true,
        "hostType": "0",
        "bridge": "2f761eeaa39069eb",
        "accessoryId": "",
        "parentService": "",
        "name": "筒灯",
        "serviceName": "Lightbulb",
        "topic": "",
        "filter": false,
        "manufacturer": "NRCHKB",
        "model": "1.4.3",
        "serialNo": "Default Serial Number",
        "firmwareRev": "1.4.3",
        "hardwareRev": "1.4.3",
        "softwareRev": "1.4.3",
        "cameraConfigVideoProcessor": "ffmpeg",
        "cameraConfigSource": "",
        "cameraConfigStillImageSource": "",
        "cameraConfigMaxStreams": 2,
        "cameraConfigMaxWidth": 1280,
        "cameraConfigMaxHeight": 720,
        "cameraConfigMaxFPS": 10,
        "cameraConfigMaxBitrate": 300,
        "cameraConfigVideoCodec": "libx264",
        "cameraConfigAudioCodec": "libfdk_aac",
        "cameraConfigAudio": false,
        "cameraConfigPacketSize": 1316,
        "cameraConfigVerticalFlip": false,
        "cameraConfigHorizontalFlip": false,
        "cameraConfigMapVideo": "0:0",
        "cameraConfigMapAudio": "0:1",
        "cameraConfigVideoFilter": "scale=1280:720",
        "cameraConfigAdditionalCommandLine": "-tune zerolatency",
        "cameraConfigDebug": false,
        "cameraConfigSnapshotOutput": "disabled",
        "cameraConfigInterfaceName": "",
        "characteristicProperties": "{}",
        "waitForSetupMsg": false,
        "outputs": 2,
        "x": 850,
        "y": 360,
        "wires": [
            [
                "e7c15ae0eaa0d86e"
            ],
            []
        ]
    },
    {
        "id": "f45b5b004d64d908",
        "type": "knxUltimate",
        "z": "dfd031a2a96aba1c",
        "server": "1d670c832649ebb6",
        "topic": "12/1/130",
        "setTopicType": "str",
        "outputtopic": "",
        "dpt": "1.001",
        "initialread": "1",
        "notifyreadrequest": false,
        "notifyresponse": true,
        "notifywrite": true,
        "notifyreadrequestalsorespondtobus": false,
        "notifyreadrequestalsorespondtobusdefaultvalueifnotinitialized": "0",
        "listenallga": false,
        "name": "开关反馈",
        "outputtype": "update",
        "outputRBE": "false",
        "inputRBE": "true",
        "formatmultiplyvalue": 1,
        "formatnegativevalue": "leave",
        "formatdecimalsvalue": 999,
        "passthrough": "no",
        "x": 120,
        "y": 560,
        "wires": [
            [
                "b2681f12d3395126",
                "49128426c6cf8515",
                "96e5ff5e9a73edc7",
                "ed52c942bd4b4469"
            ]
        ]
    },
    {
        "id": "49128426c6cf8515",
        "type": "knxUltimate",
        "z": "dfd031a2a96aba1c",
        "server": "1d670c832649ebb6",
        "topic": "12/2/130",
        "setTopicType": "str",
        "outputtopic": "",
        "dpt": "5.100",
        "initialread": "1",
        "notifyreadrequest": false,
        "notifyresponse": true,
        "notifywrite": true,
        "notifyreadrequestalsorespondtobus": false,
        "notifyreadrequestalsorespondtobusdefaultvalueifnotinitialized": "0",
        "listenallga": false,
        "name": "模式反馈",
        "outputtype": "read",
        "outputRBE": "false",
        "inputRBE": "true",
        "formatmultiplyvalue": 1,
        "formatnegativevalue": "leave",
        "formatdecimalsvalue": 999,
        "passthrough": "no",
        "x": 360,
        "y": 620,
        "wires": [
            [
                "3e6be55812649b32"
            ]
        ]
    },
    {
        "id": "96e5ff5e9a73edc7",
        "type": "knxUltimate",
        "z": "dfd031a2a96aba1c",
        "server": "1d670c832649ebb6",
        "topic": "12/3/130",
        "setTopicType": "str",
        "outputtopic": "",
        "dpt": "5.100",
        "initialread": "1",
        "notifyreadrequest": false,
        "notifyresponse": true,
        "notifywrite": true,
        "notifyreadrequestalsorespondtobus": false,
        "notifyreadrequestalsorespondtobusdefaultvalueifnotinitialized": "0",
        "listenallga": false,
        "name": "风速反馈",
        "outputtype": "read",
        "outputRBE": "false",
        "inputRBE": "true",
        "formatmultiplyvalue": 1,
        "formatnegativevalue": "leave",
        "formatdecimalsvalue": 999,
        "passthrough": "no",
        "x": 360,
        "y": 680,
        "wires": [
            [
                "c134419a31d9aabb"
            ]
        ]
    },
    {
        "id": "e4da86a1c118b2ff",
        "type": "knxUltimate",
        "z": "dfd031a2a96aba1c",
        "server": "1d670c832649ebb6",
        "topic": "12/5/130",
        "setTopicType": "str",
        "outputtopic": "",
        "dpt": "9.001",
        "initialread": "1",
        "notifyreadrequest": false,
        "notifyresponse": true,
        "notifywrite": true,
        "notifyreadrequestalsorespondtobus": false,
        "notifyreadrequestalsorespondtobusdefaultvalueifnotinitialized": "0",
        "listenallga": false,
        "name": "实际温度反馈",
        "outputtype": "read",
        "outputRBE": "false",
        "inputRBE": "true",
        "formatmultiplyvalue": 1,
        "formatnegativevalue": "leave",
        "formatdecimalsvalue": 999,
        "passthrough": "no",
        "x": 370,
        "y": 800,
        "wires": [
            [
                "f96938f1733455ea"
            ]
        ]
    },
    {
        "id": "7413047c5faeb1b5",
        "type": "homekit-service",
        "z": "dfd031a2a96aba1c",
        "isParent": true,
        "hostType": "0",
        "bridge": "2f761eeaa39069eb",
        "accessoryId": "",
        "parentService": "",
        "name": "空调",
        "serviceName": "HeaterCooler",
        "topic": "",
        "filter": false,
        "manufacturer": "IOT DREAM",
        "model": "1.3.6",
        "serialNo": "Default Serial Number",
        "firmwareRev": "1.3.6",
        "hardwareRev": "1.3.6",
        "softwareRev": "1.3.6",
        "cameraConfigVideoProcessor": "ffmpeg",
        "cameraConfigSource": "",
        "cameraConfigStillImageSource": "",
        "cameraConfigMaxStreams": 2,
        "cameraConfigMaxWidth": 1280,
        "cameraConfigMaxHeight": 720,
        "cameraConfigMaxFPS": 10,
        "cameraConfigMaxBitrate": 300,
        "cameraConfigVideoCodec": "libx264",
        "cameraConfigAudioCodec": "libfdk_aac",
        "cameraConfigAudio": false,
        "cameraConfigPacketSize": 1316,
        "cameraConfigVerticalFlip": false,
        "cameraConfigHorizontalFlip": false,
        "cameraConfigMapVideo": "0:0",
        "cameraConfigMapAudio": "0:1",
        "cameraConfigVideoFilter": "scale=1280:720",
        "cameraConfigAdditionalCommandLine": "-tune zerolatency",
        "cameraConfigDebug": false,
        "cameraConfigSnapshotOutput": "disabled",
        "cameraConfigInterfaceName": "",
        "characteristicProperties": "{     \"TargetHeaterCoolerState\": {         \"validValues\": [             1,             2         ]     },     \"CurrentHeaterCoolerState\": {         \"validValues\": [             0,             2,             3         ]     },     \"HeatingThresholdTemperature\": {         \"minValue\": 16,         \"maxValue\": 32,         \"minStep\": 1     },     \"CoolingThresholdTemperature\": {         \"minValue\": 16,         \"maxValue\": 32,         \"minStep\": 1     },     \"RotationSpeed\": {         \"minValue\": 0,         \"maxValue\": 100,         \"minStep\": 33     } }",
        "waitForSetupMsg": false,
        "outputs": 2,
        "x": 1010,
        "y": 700,
        "wires": [
            [
                "109d2db9b9ee51c1"
            ],
            []
        ]
    },
    {
        "id": "109d2db9b9ee51c1",
        "type": "subflow:5ec824872cd94a31",
        "z": "dfd031a2a96aba1c",
        "name": "",
        "env": [],
        "x": 1210,
        "y": 700,
        "wires": [
            [
                "b91a00d486955c7e"
            ],
            [
                "b10a4156d705af71"
            ],
            [
                "47122de3b274162e"
            ],
            [
                "47122de3b274162e"
            ],
            [
                "92966ccf87db7e1c"
            ]
        ]
    },
    {
        "id": "b91a00d486955c7e",
        "type": "knxUltimate",
        "z": "dfd031a2a96aba1c",
        "server": "1d670c832649ebb6",
        "topic": "12/1/2",
        "setTopicType": "str",
        "outputtopic": "",
        "dpt": "1.001",
        "initialread": "0",
        "notifyreadrequest": false,
        "notifyresponse": false,
        "notifywrite": true,
        "notifyreadrequestalsorespondtobus": false,
        "notifyreadrequestalsorespondtobusdefaultvalueifnotinitialized": "0",
        "listenallga": false,
        "name": "开关地址",
        "outputtype": "write",
        "outputRBE": "true",
        "inputRBE": "false",
        "formatmultiplyvalue": 1,
        "formatnegativevalue": "leave",
        "formatdecimalsvalue": 999,
        "passthrough": "no",
        "x": 1510,
        "y": 600,
        "wires": [
            []
        ]
    },
    {
        "id": "b10a4156d705af71",
        "type": "knxUltimate",
        "z": "dfd031a2a96aba1c",
        "server": "1d670c832649ebb6",
        "topic": "12/2/2",
        "setTopicType": "str",
        "outputtopic": "",
        "dpt": "5.100",
        "initialread": "0",
        "notifyreadrequest": false,
        "notifyresponse": false,
        "notifywrite": true,
        "notifyreadrequestalsorespondtobus": false,
        "notifyreadrequestalsorespondtobusdefaultvalueifnotinitialized": "0",
        "listenallga": false,
        "name": "模式地址",
        "outputtype": "write",
        "outputRBE": "true",
        "inputRBE": "false",
        "formatmultiplyvalue": 1,
        "formatnegativevalue": "leave",
        "formatdecimalsvalue": 999,
        "passthrough": "no",
        "x": 1510,
        "y": 660,
        "wires": [
            []
        ]
    },
    {
        "id": "92966ccf87db7e1c",
        "type": "knxUltimate",
        "z": "dfd031a2a96aba1c",
        "server": "1d670c832649ebb6",
        "topic": "12/3/2",
        "setTopicType": "str",
        "outputtopic": "",
        "dpt": "5.100",
        "initialread": "0",
        "notifyreadrequest": false,
        "notifyresponse": false,
        "notifywrite": true,
        "notifyreadrequestalsorespondtobus": false,
        "notifyreadrequestalsorespondtobusdefaultvalueifnotinitialized": "0",
        "listenallga": false,
        "name": "风速地址",
        "outputtype": "write",
        "outputRBE": "true",
        "inputRBE": "false",
        "formatmultiplyvalue": 1,
        "formatnegativevalue": "leave",
        "formatdecimalsvalue": 999,
        "passthrough": "no",
        "x": 1510,
        "y": 780,
        "wires": [
            []
        ]
    },
    {
        "id": "47122de3b274162e",
        "type": "knxUltimate",
        "z": "dfd031a2a96aba1c",
        "server": "1d670c832649ebb6",
        "topic": "12/4/2",
        "setTopicType": "str",
        "outputtopic": "",
        "dpt": "9.001",
        "initialread": "0",
        "notifyreadrequest": false,
        "notifyresponse": false,
        "notifywrite": true,
        "notifyreadrequestalsorespondtobus": false,
        "notifyreadrequestalsorespondtobusdefaultvalueifnotinitialized": "0",
        "listenallga": false,
        "name": "目标温度地址",
        "outputtype": "write",
        "outputRBE": "true",
        "inputRBE": "false",
        "formatmultiplyvalue": 1,
        "formatnegativevalue": "leave",
        "formatdecimalsvalue": 999,
        "passthrough": "no",
        "x": 1520,
        "y": 720,
        "wires": [
            []
        ]
    },
    {
        "id": "04ce22e4bcd6d659",
        "type": "inject",
        "z": "dfd031a2a96aba1c",
        "name": "循环获取温度",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "60",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 800,
        "wires": [
            [
                "e4da86a1c118b2ff"
            ]
        ]
    },
    {
        "id": "484ea697ccee549a",
        "type": "homekit-service",
        "z": "dfd031a2a96aba1c",
        "isParent": true,
        "hostType": "0",
        "bridge": "2f761eeaa39069eb",
        "accessoryId": "",
        "parentService": "",
        "name": "布帘",
        "serviceName": "WindowCovering",
        "topic": "",
        "filter": false,
        "manufacturer": "IOT DREAM",
        "model": "1.3.6",
        "serialNo": "Default Serial Number",
        "firmwareRev": "1.3.6",
        "hardwareRev": "1.3.6",
        "softwareRev": "1.3.6",
        "cameraConfigVideoProcessor": "ffmpeg",
        "cameraConfigSource": "",
        "cameraConfigStillImageSource": "",
        "cameraConfigMaxStreams": 2,
        "cameraConfigMaxWidth": 1280,
        "cameraConfigMaxHeight": 720,
        "cameraConfigMaxFPS": 10,
        "cameraConfigMaxBitrate": 300,
        "cameraConfigVideoCodec": "libx264",
        "cameraConfigAudioCodec": "libfdk_aac",
        "cameraConfigAudio": false,
        "cameraConfigPacketSize": 1316,
        "cameraConfigVerticalFlip": false,
        "cameraConfigHorizontalFlip": false,
        "cameraConfigMapVideo": "0:0",
        "cameraConfigMapAudio": "0:1",
        "cameraConfigVideoFilter": "scale=1280:720",
        "cameraConfigAdditionalCommandLine": "-tune zerolatency",
        "cameraConfigDebug": false,
        "cameraConfigSnapshotOutput": "disabled",
        "cameraConfigInterfaceName": "",
        "characteristicProperties": "",
        "waitForSetupMsg": false,
        "outputs": 2,
        "x": 790,
        "y": 1020,
        "wires": [
            [],
            [
                "1b03db1805e49890"
            ]
        ]
    },
    {
        "id": "efe031cb3d082780",
        "type": "homekit-service",
        "z": "dfd031a2a96aba1c",
        "isParent": true,
        "hostType": "0",
        "bridge": "2f761eeaa39069eb",
        "accessoryId": "",
        "parentService": "",
        "name": "纱帘",
        "serviceName": "WindowCovering",
        "topic": "",
        "filter": false,
        "manufacturer": "IOT DREAM",
        "model": "1.3.6",
        "serialNo": "Default Serial Number",
        "firmwareRev": "1.3.6",
        "hardwareRev": "1.3.6",
        "softwareRev": "1.3.6",
        "cameraConfigVideoProcessor": "ffmpeg",
        "cameraConfigSource": "",
        "cameraConfigStillImageSource": "",
        "cameraConfigMaxStreams": 2,
        "cameraConfigMaxWidth": 1280,
        "cameraConfigMaxHeight": 720,
        "cameraConfigMaxFPS": 10,
        "cameraConfigMaxBitrate": 300,
        "cameraConfigVideoCodec": "libx264",
        "cameraConfigAudioCodec": "libfdk_aac",
        "cameraConfigAudio": false,
        "cameraConfigPacketSize": 1316,
        "cameraConfigVerticalFlip": false,
        "cameraConfigHorizontalFlip": false,
        "cameraConfigMapVideo": "0:0",
        "cameraConfigMapAudio": "0:1",
        "cameraConfigVideoFilter": "scale=1280:720",
        "cameraConfigAdditionalCommandLine": "-tune zerolatency",
        "cameraConfigDebug": false,
        "cameraConfigSnapshotOutput": "disabled",
        "cameraConfigInterfaceName": "",
        "characteristicProperties": "",
        "waitForSetupMsg": false,
        "outputs": 2,
        "x": 790,
        "y": 1280,
        "wires": [
            [],
            [
                "26420adeb4163d52"
            ]
        ]
    },
    {
        "id": "5c5f4fafbe449ddc",
        "type": "knxUltimate",
        "z": "dfd031a2a96aba1c",
        "server": "1d670c832649ebb6",
        "topic": "1/0/24",
        "setTopicType": "str",
        "outputtopic": "",
        "dpt": "1.001",
        "initialread": "1",
        "notifyreadrequest": false,
        "notifyresponse": true,
        "notifywrite": true,
        "notifyreadrequestalsorespondtobus": false,
        "notifyreadrequestalsorespondtobusdefaultvalueifnotinitialized": "",
        "listenallga": false,
        "name": "Light Status",
        "outputtype": "update",
        "outputRBE": "false",
        "inputRBE": "true",
        "passthrough": "no",
        "x": 450,
        "y": 120,
        "wires": [
            [
                "04e9bd11a32d74e1"
            ]
        ]
    },
    {
        "id": "04e9bd11a32d74e1",
        "type": "function",
        "z": "dfd031a2a96aba1c",
        "name": "ON/OFF",
        "func": "// Verifico cosa ricevo dall'input\nif (Boolean(msg.payload) === true) {\n    return {payload:{\"On\":true}}\n}\nelse if (Boolean(msg.payload) === false)\n{\n    return {payload:{\"On\":false}}\n}",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 120,
        "wires": [
            [
                "cba5a84305cee286"
            ]
        ]
    },
    {
        "id": "58bc16fabd6b2638",
        "type": "knxUltimate",
        "z": "dfd031a2a96aba1c",
        "server": "1d670c832649ebb6",
        "topic": "1/0/24",
        "setTopicType": "str",
        "outputtopic": "",
        "dpt": "1.001",
        "initialread": 0,
        "notifyreadrequest": false,
        "notifyresponse": false,
        "notifywrite": true,
        "notifyreadrequestalsorespondtobus": false,
        "notifyreadrequestalsorespondtobusdefaultvalueifnotinitialized": "",
        "listenallga": false,
        "name": "Light switch",
        "outputtype": "write",
        "outputRBE": "true",
        "inputRBE": "false",
        "passthrough": "no",
        "x": 1270,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "851c5d49eb4fe33c",
        "type": "function",
        "z": "dfd031a2a96aba1c",
        "name": "CONVERSION",
        "func": "// Pass only messages coming from homekit node\nif (msg.hap.context !== undefined) {\n    if (msg.payload.On !== undefined) {\n        if (Boolean(msg.payload.On) === true) {\n            return { payload: true };\n        }\n        else if (Boolean(msg.payload.On) === false) {\n            return { payload: false };\n        }\n    }\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1060,
        "y": 120,
        "wires": [
            [
                "58bc16fabd6b2638"
            ]
        ]
    },
    {
        "id": "78a0f9ce24c0fba8",
        "type": "knxUltimate",
        "z": "dfd031a2a96aba1c",
        "server": "1d670c832649ebb6",
        "topic": "1/0/33",
        "setTopicType": "str",
        "outputtopic": "",
        "dpt": "1.001",
        "initialread": "1",
        "notifyreadrequest": false,
        "notifyresponse": true,
        "notifywrite": true,
        "notifyreadrequestalsorespondtobus": false,
        "notifyreadrequestalsorespondtobusdefaultvalueifnotinitialized": "",
        "listenallga": false,
        "name": "Light Status",
        "outputtype": "update",
        "outputRBE": "false",
        "inputRBE": "true",
        "passthrough": "no",
        "x": 450,
        "y": 240,
        "wires": [
            [
                "23d059f635faee56"
            ]
        ]
    },
    {
        "id": "23d059f635faee56",
        "type": "function",
        "z": "dfd031a2a96aba1c",
        "name": "ON/OFF",
        "func": "// Verifico cosa ricevo dall'input\nif (Boolean(msg.payload) === true) {\n    return {payload:{\"On\":true}}\n}\nelse if (Boolean(msg.payload) === false)\n{\n    return {payload:{\"On\":false}}\n}",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 240,
        "wires": [
            [
                "b7f05e7fba3f6e1b"
            ]
        ]
    },
    {
        "id": "6c8ddc32938452f2",
        "type": "knxUltimate",
        "z": "dfd031a2a96aba1c",
        "server": "1d670c832649ebb6",
        "topic": "1/0/33",
        "setTopicType": "str",
        "outputtopic": "",
        "dpt": "1.001",
        "initialread": 0,
        "notifyreadrequest": false,
        "notifyresponse": false,
        "notifywrite": true,
        "notifyreadrequestalsorespondtobus": false,
        "notifyreadrequestalsorespondtobusdefaultvalueifnotinitialized": "",
        "listenallga": false,
        "name": "Light switch",
        "outputtype": "write",
        "outputRBE": "true",
        "inputRBE": "false",
        "passthrough": "no",
        "x": 1270,
        "y": 240,
        "wires": [
            []
        ]
    },
    {
        "id": "1d2ab9999ab0e7a7",
        "type": "function",
        "z": "dfd031a2a96aba1c",
        "name": "CONVERSION",
        "func": "// Pass only messages coming from homekit node\nif (msg.hap.context !== undefined) {\n    if (msg.payload.On !== undefined) {\n        if (Boolean(msg.payload.On) === true) {\n            return { payload: true };\n        }\n        else if (Boolean(msg.payload.On) === false) {\n            return { payload: false };\n        }\n    }\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1060,
        "y": 240,
        "wires": [
            [
                "6c8ddc32938452f2"
            ]
        ]
    },
    {
        "id": "75a9273b6c39118d",
        "type": "knxUltimate",
        "z": "dfd031a2a96aba1c",
        "server": "1d670c832649ebb6",
        "topic": "1/0/34",
        "setTopicType": "str",
        "outputtopic": "",
        "dpt": "1.001",
        "initialread": "1",
        "notifyreadrequest": false,
        "notifyresponse": true,
        "notifywrite": true,
        "notifyreadrequestalsorespondtobus": false,
        "notifyreadrequestalsorespondtobusdefaultvalueifnotinitialized": "",
        "listenallga": false,
        "name": "Light Status",
        "outputtype": "update",
        "outputRBE": "false",
        "inputRBE": "true",
        "passthrough": "no",
        "x": 450,
        "y": 360,
        "wires": [
            [
                "9ae54c2f21349948"
            ]
        ]
    },
    {
        "id": "9ae54c2f21349948",
        "type": "function",
        "z": "dfd031a2a96aba1c",
        "name": "ON/OFF",
        "func": "// Verifico cosa ricevo dall'input\nif (Boolean(msg.payload) === true) {\n    return {payload:{\"On\":true}}\n}\nelse if (Boolean(msg.payload) === false)\n{\n    return {payload:{\"On\":false}}\n}",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 360,
        "wires": [
            [
                "0843122ffa53f6ab"
            ]
        ]
    },
    {
        "id": "a595341e738c32a3",
        "type": "knxUltimate",
        "z": "dfd031a2a96aba1c",
        "server": "1d670c832649ebb6",
        "topic": "1/0/34",
        "setTopicType": "str",
        "outputtopic": "",
        "dpt": "1.001",
        "initialread": 0,
        "notifyreadrequest": false,
        "notifyresponse": false,
        "notifywrite": true,
        "notifyreadrequestalsorespondtobus": false,
        "notifyreadrequestalsorespondtobusdefaultvalueifnotinitialized": "",
        "listenallga": false,
        "name": "Light switch",
        "outputtype": "write",
        "outputRBE": "true",
        "inputRBE": "false",
        "passthrough": "no",
        "x": 1270,
        "y": 360,
        "wires": [
            []
        ]
    },
    {
        "id": "e7c15ae0eaa0d86e",
        "type": "function",
        "z": "dfd031a2a96aba1c",
        "name": "CONVERSION",
        "func": "// Pass only messages coming from homekit node\nif (msg.hap.context !== undefined) {\n    if (msg.payload.On !== undefined) {\n        if (Boolean(msg.payload.On) === true) {\n            return { payload: true };\n        }\n        else if (Boolean(msg.payload.On) === false) {\n            return { payload: false };\n        }\n    }\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1060,
        "y": 360,
        "wires": [
            [
                "a595341e738c32a3"
            ]
        ]
    },
    {
        "id": "f96938f1733455ea",
        "type": "function",
        "z": "dfd031a2a96aba1c",
        "name": "室内温度反馈",
        "func": "node.log('收到室内温度反馈:'+msg.payload);\nreturn { payload: { \"CurrentTemperature\": msg.payload }}",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 800,
        "wires": [
            [
                "7413047c5faeb1b5"
            ]
        ]
    },
    {
        "id": "c134419a31d9aabb",
        "type": "function",
        "z": "dfd031a2a96aba1c",
        "name": "风速",
        "func": "node.log('收到空调风速反馈:'+msg.payload);\nif(msg.payload === 0) \n{\n    return { payload: { \"RotationSpeed\": 0 }}\n}\nelse if(msg.payload === 1) \n{\n    return { payload: { \"RotationSpeed\": 33 } }\n}\nelse if(msg.payload === 3) \n{\n    return { payload: { \"RotationSpeed\": 66 } }\n}\nelse if(msg.payload === 5) \n{\n    return { payload: { \"RotationSpeed\": 100 } }\n}",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 680,
        "y": 680,
        "wires": [
            [
                "7413047c5faeb1b5"
            ]
        ]
    },
    {
        "id": "3e6be55812649b32",
        "type": "function",
        "z": "dfd031a2a96aba1c",
        "name": "模式",
        "func": "node.log('收到空调模式反馈:'+msg.payload);\nif(msg.payload === 1) \n{\n  return { payload: { \"CurrentHeaterCoolerState\": 2, \"TargetHeaterCoolerState\": 1 }}\n} \nelse if(msg.payload === 3) \n{\n  return { payload: { \"CurrentHeaterCoolerState\": 3, \"TargetHeaterCoolerState\": 2 } }\n}",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 680,
        "y": 620,
        "wires": [
            [
                "7413047c5faeb1b5"
            ]
        ]
    },
    {
        "id": "9bd662a92ef31d7e",
        "type": "function",
        "z": "dfd031a2a96aba1c",
        "name": "设置温度反馈",
        "func": "node.log('收到空调设置温度反馈:'+msg.payload);\nvar value  = msg.payload;\nvar HeatingThresholdTemperature = {};\nvar CoolingThresholdTemperature = {};\nHeatingThresholdTemperature.payload = {\"HeatingThresholdTemperature\":value}\nCoolingThresholdTemperature.payload = {\"CoolingThresholdTemperature\":value}\nreturn [HeatingThresholdTemperature,CoolingThresholdTemperature];",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 740,
        "wires": [
            [
                "7413047c5faeb1b5"
            ],
            [
                "7413047c5faeb1b5"
            ]
        ]
    },
    {
        "id": "b2681f12d3395126",
        "type": "function",
        "z": "dfd031a2a96aba1c",
        "name": "开关",
        "func": "node.log('收到空调开关反馈:'+msg.payload);\nif (Boolean(msg.payload) === true) {\n    return { payload: { \"Active\": 1 } }\n}\nelse if (Boolean(msg.payload) === false) {\n    return { payload: { \"Active\": 0 } }\n}",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 680,
        "y": 560,
        "wires": [
            [
                "7413047c5faeb1b5"
            ]
        ]
    },
    {
        "id": "ed52c942bd4b4469",
        "type": "knxUltimate",
        "z": "dfd031a2a96aba1c",
        "server": "1d670c832649ebb6",
        "topic": "12/4/130",
        "setTopicType": "str",
        "outputtopic": "",
        "dpt": "9.001",
        "initialread": "3",
        "notifyreadrequest": false,
        "notifyresponse": true,
        "notifywrite": true,
        "notifyreadrequestalsorespondtobus": false,
        "notifyreadrequestalsorespondtobusdefaultvalueifnotinitialized": "0",
        "listenallga": false,
        "name": "设置温度反馈",
        "outputtype": "read",
        "outputRBE": "false",
        "inputRBE": "true",
        "formatmultiplyvalue": 1,
        "formatnegativevalue": "leave",
        "formatdecimalsvalue": 999,
        "passthrough": "no",
        "x": 370,
        "y": 740,
        "wires": [
            [
                "9bd662a92ef31d7e"
            ]
        ]
    },
    {
        "id": "d01eca24ab094dc4",
        "type": "function",
        "z": "dfd031a2a96aba1c",
        "name": "",
        "func": "node.log('窗帘1---------------------'+msg.payload);\nconst sence = flow.get(\"sence\");\nif (msg.payload !== undefined) {\n    if (sence !== undefined) {\n        if (!sence) {\n            let current = 100 - msg.payload;\n            return { payload: { \"CurrentPosition\": current } };\n        }\n    }\n}\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 1220,
        "wires": [
            [
                "efe031cb3d082780"
            ]
        ]
    },
    {
        "id": "b644aa7f3ead9617",
        "type": "knxUltimate",
        "z": "dfd031a2a96aba1c",
        "server": "1d670c832649ebb6",
        "topic": "2/1/68",
        "setTopicType": "str",
        "outputtopic": "",
        "dpt": "5.001",
        "initialread": "0",
        "notifyreadrequest": false,
        "notifyresponse": true,
        "notifywrite": true,
        "notifyreadrequestalsorespondtobus": false,
        "notifyreadrequestalsorespondtobusdefaultvalueifnotinitialized": "0",
        "listenallga": false,
        "name": "Covering Status",
        "outputtype": "update",
        "outputRBE": "false",
        "inputRBE": "true",
        "formatmultiplyvalue": 1,
        "formatnegativevalue": "leave",
        "formatdecimalsvalue": 999,
        "passthrough": "no",
        "x": 380,
        "y": 1220,
        "wires": [
            [
                "d01eca24ab094dc4"
            ]
        ]
    },
    {
        "id": "6a489ec992de075f",
        "type": "knxUltimate",
        "z": "dfd031a2a96aba1c",
        "server": "1d670c832649ebb6",
        "topic": "2/0/68",
        "setTopicType": "str",
        "outputtopic": "",
        "dpt": "5.100",
        "initialread": "0",
        "notifyreadrequest": false,
        "notifyresponse": true,
        "notifywrite": true,
        "notifyreadrequestalsorespondtobus": false,
        "notifyreadrequestalsorespondtobusdefaultvalueifnotinitialized": "0",
        "listenallga": false,
        "name": "Covering Manual Status",
        "outputtype": "update",
        "outputRBE": "false",
        "inputRBE": "false",
        "formatmultiplyvalue": 1,
        "formatnegativevalue": "leave",
        "formatdecimalsvalue": 999,
        "passthrough": "no",
        "x": 370,
        "y": 1320,
        "wires": [
            [
                "8138b789381dc87d"
            ]
        ]
    },
    {
        "id": "8138b789381dc87d",
        "type": "function",
        "z": "dfd031a2a96aba1c",
        "name": "",
        "func": "node.log('窗帘2---------------------' + msg.payload);\nlet target = flow.get('target') || 0;\nlet timer = context.get('timer') || null;\nlet mode = msg.payload; // 0 for stop, 1 for decrement, 2 for increment\nlet interval = 120; // 120ms interval\n\n// Function to clear the timer and send the current count\nfunction sendAndClear() {\n    clearTimeout(timer);\n    context.set('timer', null);\n    flow.set(\"sence\", true);\n    msg.payload = { \"CurrentPosition\": target, \"TargetPosition\": target };\n    node.send(msg);\n}\n\nif (mode === 0) {\n    // If mode is 0, stop the counting and send the current target immediately\n    sendAndClear();\n} else if (mode === 1) {\n    if (timer) return null; // If already counting, ignore the input\n    function increment() {\n        target++;\n        if (target >= 100) {\n            target = 100;\n            sendAndClear();\n        } else {\n            flow.set('count', target);\n            timer = setTimeout(increment, interval);\n            context.set('timer', timer);\n        }\n    }\n    increment();\n} else if (mode === 2) {\n    if (timer) return null; // If already counting, ignore the input\n    function decrement() {\n        target--;\n        if (target <= 0) {\n            target = 0;\n            sendAndClear();\n        } else {\n            flow.set('target', target);\n            timer = setTimeout(decrement, interval);\n            context.set('timer', timer);\n        }\n    }\n    decrement();\n} else {\n    return null; // Invalid input, do nothing\n}",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 1320,
        "wires": [
            [
                "efe031cb3d082780"
            ]
        ]
    },
    {
        "id": "26420adeb4163d52",
        "type": "function",
        "z": "dfd031a2a96aba1c",
        "name": "",
        "func": "const target = flow.get(\"target\");\n\nif (msg.hap.context !== undefined) {\n    const sence = flow.get(\"sence\");\n    if (msg.payload.TargetPosition !== undefined) {\n        let position = 100 - msg.payload.TargetPosition;\n        if (sence === undefined || !sence) {\n            if (target !== position) {\n                flow.set(\"target\", position);\n                return { payload: position };\n            }\n        }\n    }\n\n    flow.set(\"sence\", false);\n}\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 970,
        "y": 1280,
        "wires": [
            [
                "b90e9b81b8c3c3b7"
            ]
        ]
    },
    {
        "id": "b90e9b81b8c3c3b7",
        "type": "knxUltimate",
        "z": "dfd031a2a96aba1c",
        "server": "1d670c832649ebb6",
        "topic": "2/1/68",
        "setTopicType": "str",
        "outputtopic": "",
        "dpt": "5.001",
        "initialread": 0,
        "notifyreadrequest": false,
        "notifyresponse": false,
        "notifywrite": true,
        "notifyreadrequestalsorespondtobus": false,
        "notifyreadrequestalsorespondtobusdefaultvalueifnotinitialized": "0",
        "listenallga": false,
        "name": "Covering",
        "outputtype": "write",
        "outputRBE": "false",
        "inputRBE": "false",
        "formatmultiplyvalue": 1,
        "formatnegativevalue": "leave",
        "formatdecimalsvalue": 999,
        "passthrough": "no",
        "x": 1160,
        "y": 1280,
        "wires": [
            []
        ]
    },
    {
        "id": "10056a470f3820c1",
        "type": "function",
        "z": "dfd031a2a96aba1c",
        "name": "",
        "func": "node.log('窗帘1---------------------'+msg.payload);\nconst sence = flow.get(\"sence\");\nif (msg.payload !== undefined) {\n    if (sence !== undefined) {\n        if (!sence) {\n            let current = 100 - msg.payload;\n            return { payload: { \"CurrentPosition\": current } };\n        }\n    }\n}\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 980,
        "wires": [
            [
                "484ea697ccee549a"
            ]
        ]
    },
    {
        "id": "c2ef36f498a18cfd",
        "type": "knxUltimate",
        "z": "dfd031a2a96aba1c",
        "server": "1d670c832649ebb6",
        "topic": "2/1/67",
        "setTopicType": "str",
        "outputtopic": "",
        "dpt": "5.001",
        "initialread": "0",
        "notifyreadrequest": false,
        "notifyresponse": true,
        "notifywrite": true,
        "notifyreadrequestalsorespondtobus": false,
        "notifyreadrequestalsorespondtobusdefaultvalueifnotinitialized": "0",
        "listenallga": false,
        "name": "Covering Status",
        "outputtype": "update",
        "outputRBE": "false",
        "inputRBE": "true",
        "formatmultiplyvalue": 1,
        "formatnegativevalue": "leave",
        "formatdecimalsvalue": 999,
        "passthrough": "no",
        "x": 380,
        "y": 980,
        "wires": [
            [
                "10056a470f3820c1"
            ]
        ]
    },
    {
        "id": "9992301cb3e5d28c",
        "type": "knxUltimate",
        "z": "dfd031a2a96aba1c",
        "server": "1d670c832649ebb6",
        "topic": "2/0/67",
        "setTopicType": "str",
        "outputtopic": "",
        "dpt": "5.100",
        "initialread": "0",
        "notifyreadrequest": false,
        "notifyresponse": true,
        "notifywrite": true,
        "notifyreadrequestalsorespondtobus": false,
        "notifyreadrequestalsorespondtobusdefaultvalueifnotinitialized": "0",
        "listenallga": false,
        "name": "Covering Manual Status",
        "outputtype": "update",
        "outputRBE": "false",
        "inputRBE": "false",
        "formatmultiplyvalue": 1,
        "formatnegativevalue": "leave",
        "formatdecimalsvalue": 999,
        "passthrough": "no",
        "x": 370,
        "y": 1080,
        "wires": [
            [
                "688294bccd7c0728"
            ]
        ]
    },
    {
        "id": "688294bccd7c0728",
        "type": "function",
        "z": "dfd031a2a96aba1c",
        "name": "",
        "func": "node.log('窗帘2---------------------' + msg.payload);\nlet target = flow.get('target') || 0;\nlet timer = context.get('timer') || null;\nlet mode = msg.payload; // 0 for stop, 1 for decrement, 2 for increment\nlet interval = 120; // 120ms interval\n\n// Function to clear the timer and send the current count\nfunction sendAndClear() {\n    clearTimeout(timer);\n    context.set('timer', null);\n    flow.set(\"sence\", true);\n    msg.payload = { \"CurrentPosition\": target, \"TargetPosition\": target };\n    node.send(msg);\n}\n\nif (mode === 0) {\n    // If mode is 0, stop the counting and send the current target immediately\n    sendAndClear();\n} else if (mode === 1) {\n    if (timer) return null; // If already counting, ignore the input\n    function increment() {\n        target++;\n        if (target >= 100) {\n            target = 100;\n            sendAndClear();\n        } else {\n            flow.set('count', target);\n            timer = setTimeout(increment, interval);\n            context.set('timer', timer);\n        }\n    }\n    increment();\n} else if (mode === 2) {\n    if (timer) return null; // If already counting, ignore the input\n    function decrement() {\n        target--;\n        if (target <= 0) {\n            target = 0;\n            sendAndClear();\n        } else {\n            flow.set('target', target);\n            timer = setTimeout(decrement, interval);\n            context.set('timer', timer);\n        }\n    }\n    decrement();\n} else {\n    return null; // Invalid input, do nothing\n}",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 1080,
        "wires": [
            [
                "484ea697ccee549a"
            ]
        ]
    },
    {
        "id": "1b03db1805e49890",
        "type": "function",
        "z": "dfd031a2a96aba1c",
        "name": "",
        "func": "const target = flow.get(\"target\");\n\nif (msg.hap.context !== undefined) {\n    const sence = flow.get(\"sence\");\n    if (msg.payload.TargetPosition !== undefined) {\n        let position = 100 - msg.payload.TargetPosition;\n        if (sence === undefined || !sence) {\n            if (target !== position) {\n                flow.set(\"target\", position);\n                return { payload: position };\n            }\n        }\n    }\n\n    flow.set(\"sence\", false);\n}\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 970,
        "y": 1020,
        "wires": [
            [
                "f528f5e96304072b"
            ]
        ]
    },
    {
        "id": "f528f5e96304072b",
        "type": "knxUltimate",
        "z": "dfd031a2a96aba1c",
        "server": "1d670c832649ebb6",
        "topic": "2/1/67",
        "setTopicType": "str",
        "outputtopic": "",
        "dpt": "5.001",
        "initialread": 0,
        "notifyreadrequest": false,
        "notifyresponse": false,
        "notifywrite": true,
        "notifyreadrequestalsorespondtobus": false,
        "notifyreadrequestalsorespondtobusdefaultvalueifnotinitialized": "0",
        "listenallga": false,
        "name": "Covering",
        "outputtype": "write",
        "outputRBE": "false",
        "inputRBE": "false",
        "formatmultiplyvalue": 1,
        "formatnegativevalue": "leave",
        "formatdecimalsvalue": 999,
        "passthrough": "no",
        "x": 1160,
        "y": 1020,
        "wires": [
            []
        ]
    },
    {
        "id": "2f761eeaa39069eb",
        "type": "homekit-bridge",
        "bridgeName": "Master bedroom",
        "pinCode": "6502-4300",
        "port": "",
        "advertiser": "bonjour-hap",
        "allowInsecureRequest": false,
        "manufacturer": "NRCHKB",
        "model": "1.6.1",
        "serialNo": "Default Serial Number",
        "firmwareRev": "1.6.1",
        "hardwareRev": "1.6.1",
        "softwareRev": "1.6.1",
        "customMdnsConfig": false,
        "mdnsMulticast": true,
        "mdnsInterface": "",
        "mdnsPort": "",
        "mdnsIp": "",
        "mdnsTtl": "",
        "mdnsLoopback": true,
        "mdnsReuseAddr": true,
        "allowMessagePassthrough": true
    },
    {
        "id": "1d670c832649ebb6",
        "type": "knxUltimate-config",
        "host": "192.168.1.7",
        "port": "3671",
        "physAddr": "14.14.14",
        "hostProtocol": "TunnelUDP",
        "suppressACKRequest": true,
        "csv": "",
        "KNXEthInterface": "Auto",
        "KNXEthInterfaceManuallyInput": "",
        "stopETSImportIfNoDatapoint": "skip",
        "loglevel": "debug",
        "name": "KNX Gateway",
        "localEchoInTunneling": true,
        "delaybetweentelegrams": "50",
        "delaybetweentelegramsfurtherdelayREAD": "1",
        "ignoreTelegramsWithRepeatedFlag": true,
        "keyringFileXML": "",
        "knxSecureSelected": false,
        "autoReconnect": "yes"
    }
]